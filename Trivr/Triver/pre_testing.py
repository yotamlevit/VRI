#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 16, 2019 06:36:06 PM +0300  platform: Windows NT

import sys
import os
from Error import Error
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pre_testing_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Get_Sim_Data (root)
    pre_testing_support.init(root, top)
    root.mainloop()

w = None
def create_Get_Sim_Data(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Get_Sim_Data (w)
    pre_testing_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Get_Sim_Data():
    global w
    w.destroy()
    w = None

class Get_Sim_Data:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("354x154+623+442")
        top.title("VRI - Virtual Robot Interactions")
        top.configure(background="#2b3f77")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label_file = tk.Label(top)
        self.Label_file.place(relx=0.113, rely=0.13, height=21, width=121)
        self.Label_file.configure(activebackground="#f9f9f9")
        self.Label_file.configure(activeforeground="black")
        self.Label_file.configure(background="#2b3f77")
        self.Label_file.configure(disabledforeground="#a3a3a3")
        self.Label_file.configure(font="-family {Segoe UI} -size 11")
        self.Label_file.configure(foreground="#ffffff")
        self.Label_file.configure(highlightbackground="#d9d9d9")
        self.Label_file.configure(highlightcolor="black")
        self.Label_file.configure(text='''Environment File:''')

        self.Entry_file_name = tk.Entry(top)
        self.Entry_file_name.place(relx=0.48, rely=0.13, height=20
                , relwidth=0.463)
        self.Entry_file_name.configure(background="white")
        self.Entry_file_name.configure(disabledforeground="#a3a3a3")
        self.Entry_file_name.configure(font="-family {Courier New} -size 10")
        self.Entry_file_name.configure(foreground="#000000")
        self.Entry_file_name.configure(highlightbackground="#d9d9d9")
        self.Entry_file_name.configure(highlightcolor="black")
        self.Entry_file_name.configure(insertbackground="black")
        self.Entry_file_name.configure(selectbackground="#c4c4c4")
        self.Entry_file_name.configure(selectforeground="black")
        self.Entry_file_name.insert(0,'environment.xml')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.113, rely=0.325, relwidth=0.847)

        self.Back = tk.Button(top)
        self.Back.place(relx=0.141, rely=0.649, height=44, width=66)
        self.Back.configure(activebackground="#d9d9d9")
        self.Back.configure(activeforeground="#000000")
        self.Back.configure(background="#d9d9d9")
        self.Back.configure(disabledforeground="#a3a3a3")
        self.Back.configure(foreground="#000000")
        self.Back.configure(highlightbackground="#d9d9d9")
        self.Back.configure(highlightcolor="black")
        self.Back.configure(pady="0")
        self.Back.configure(text='''Back''')
        self.Back.bind('<Button-1>',lambda e:pre_testing_support.back_pressed())

        self.Continue = tk.Button(top)
        self.Continue.place(relx=0.537, rely=0.649, height=44, width=149)
        self.Continue.configure(activebackground="#d9d9d9")
        self.Continue.configure(activeforeground="#000000")
        self.Continue.configure(background="#d9d9d9")
        self.Continue.configure(disabledforeground="#a3a3a3")
        self.Continue.configure(foreground="#000000")
        self.Continue.configure(highlightbackground="#d9d9d9")
        self.Continue.configure(highlightcolor="black")
        self.Continue.configure(pady="0")
        self.Continue.configure(text='''Read Environment
 and start testing''')
        self.Continue.bind('<Button-1>',lambda e:self.continue_pressed(self.Entry_file_name.get(), self.action_file.get()))

        self.action_lable = tk.Label(top)
        self.action_lable.place(relx=0.056, rely=0.39, height=21, width=121)
        self.action_lable.configure(activebackground="#f9f9f9")
        self.action_lable.configure(activeforeground="black")
        self.action_lable.configure(background="#2b3f77")
        self.action_lable.configure(disabledforeground="#a3a3a3")
        self.action_lable.configure(font="-family {Segoe UI} -size 11")
        self.action_lable.configure(foreground="#ffffff")
        self.action_lable.configure(highlightbackground="#d9d9d9")
        self.action_lable.configure(highlightcolor="black")
        self.action_lable.configure(text='''Logic File:''')

        self.action_file = tk.Entry(top)
        self.action_file.place(relx=0.48, rely=0.39,height=20, relwidth=0.463)
        self.action_file.configure(background="white")
        self.action_file.configure(disabledforeground="#a3a3a3")
        self.action_file.configure(font="-family {Courier New} -size 10")
        self.action_file.configure(foreground="#000000")
        self.action_file.configure(highlightbackground="#d9d9d9")
        self.action_file.configure(highlightcolor="black")
        self.action_file.configure(insertbackground="black")
        self.action_file.configure(selectbackground="#c4c4c4")
        self.action_file.configure(selectforeground="black")
        self.action_file.configure(width=164)
        self.action_file.insert(0, 'logic.py')


        self.error = tk.Label(top)
        self.error.place(relx=0.113, rely=0.0, height=26, width=303)
        self.error.configure(background="#2b3f77")
        self.error.configure(disabledforeground="#a3a3a3")
        self.error.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.error.configure(foreground="#ff0000")
        self.error.configure(width=303)

    def continue_pressed(self, env_file, action_file):
        temp_path = sys.argv[0].split('/')
        temp_path.pop()
        path = temp_path.pop(0)
        for folder in temp_path:
            path += '/' + folder
        path += '/Data/' + env_file
        print(path)
        if os.path.isfile(path):
            pre_testing_support.continue_pressed(env_file, action_file)
        else:
            self.error.configure(text=Error.error.get('gd_cfef'))


# path_to_tool = sys.argv[0].split("/")
# path_to_tool.pop()
# temp = ""
# for word in path_to_tool:
#     temp += word + "/"
# path_to_tool = temp[:-1]
#
# PATH_TO_TOOL = "C:/Windows/System32" + ";" + path_to_tool


if __name__ == '__main__':
    vp_start_gui()





