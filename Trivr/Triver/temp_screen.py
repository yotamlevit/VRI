#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 12, 2019 01:41:06 PM +0200  platform: Windows NT
import sys
from Motor import Motor
from Environment import Environment
from Robot import Robot
from Wall import Wall
from Point import Point
from StraightLine import StraightLine
from Vector import Vector
from Object_Builder import ObjectBuilder
from Parallelogram import Parallelogram
import pygame

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import temp_screen_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = env_screen (root)
    temp_screen_support.init(root, top)
    root.mainloop()

w = None
def create_env_screen(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = env_screen (w)
    temp_screen_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_env_screen():
    global w
    w.destroy()
    w = None

class env_screen:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.top = top

        top.geometry("1000x1000+381+97")
        top.title("Env")
        top.configure(background="#d9d9d9")

        self.env_c = tk.Canvas(top)
        self.env_c.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.env_c.configure(background="#3A3838")
        self.env_c.configure(borderwidth="2")
        self.env_c.configure(insertbackground="black")
        self.env_c.configure(relief='ridge')
        self.env_c.configure(selectbackground="#c4c4c4")
        self.env_c.configure(selectforeground="black")
        self.env_c.configure(width=793)

        self.x = 0
        self.y = 0
        name = 'Bob'
        wheel = 2
        color = "black"
        length = 100
        v_r = Vector(200, 90)
        line = StraightLine(Point(500,500), v_r)
        motor1 = Motor('motor_1', 48, 210, 5, 6)
        motor2 = Motor('motor_2', 48, 210, 5, 6)
        p = Parallelogram(line, 90, length)
        r = Robot(p, name, wheel, motor1, motor2)
        v = Vector(100, 0)
        p = Point(200, 200)
        line = StraightLine(p, v)
        p = Parallelogram(line, 120, 200)
        w = Wall(p)
        self.env = Environment(r, 1000, 1000)
        self.env.add_obj(w)
        print (self.env.__str__())

        self.lap = 0
        self.draw()

    def draw(self):
        action = temp_screen_support.move(self.lap)
        self.env.move_robot(action)
        self.env_c.delete("all")
        for key, value in self.env.objects.items():
            value.draw(self.env_c, 'green')
        self.lap += 1
        self.env.robot.draw(self.env_c, 'black')
        self.top.after(100,self.draw)


if __name__ == '__main__':
    vp_start_gui()





